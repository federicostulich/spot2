# Generated by Django 5.0.6 on 2025-10-20 03:24

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Corridor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'ordering': ['state__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Settlement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('municipality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settlements', to='spots.municipality')),
            ],
            options={
                'ordering': ['municipality__state__name', 'municipality__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Spot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spot_id', models.CharField(db_index=True, max_length=64, unique=True)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('address', models.CharField(blank=True, max_length=512)),
                ('sector_id', models.IntegerField(blank=True, choices=[(9, 'Industrial'), (11, 'Office'), (12, 'Retail'), (15, 'Land')], null=True)),
                ('type_id', models.IntegerField(blank=True, choices=[(1, 'Single'), (2, 'Complex'), (3, 'Subspace')], null=True)),
                ('modality', models.CharField(choices=[('rent', 'Rent'), ('sale', 'Sale'), ('rent_sale', 'Rent & Sale')], default='rent', max_length=20)),
                ('area_sqm', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True)),
                ('price_sqm_rent_mxn', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True)),
                ('price_total_rent_mxn', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True)),
                ('price_sqm_sale_mxn', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True)),
                ('price_total_sale_mxn', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True)),
                ('maintenance_cost_mxn', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True)),
                ('user_id', models.CharField(blank=True, max_length=64)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('corridor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spots', to='spots.corridor')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spots', to='spots.region')),
                ('settlement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spots', to='spots.settlement')),
            ],
            options={
                'ordering': ['spot_id'],
            },
        ),
        migrations.AddField(
            model_name='municipality',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='municipalities', to='spots.state'),
        ),
        migrations.AddIndex(
            model_name='settlement',
            index=models.Index(fields=['name'], name='settlement_name_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='settlement',
            unique_together={('name', 'municipality')},
        ),
        migrations.AddIndex(
            model_name='spot',
            index=models.Index(fields=['location'], name='spot_point_idx'),
        ),
        migrations.AddIndex(
            model_name='spot',
            index=models.Index(fields=['sector_id'], name='spot_sector_idx'),
        ),
        migrations.AddIndex(
            model_name='spot',
            index=models.Index(fields=['type_id'], name='spot_type_idx'),
        ),
        migrations.AddIndex(
            model_name='municipality',
            index=models.Index(fields=['name'], name='municipality_name_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='municipality',
            unique_together={('name', 'state')},
        ),
    ]
